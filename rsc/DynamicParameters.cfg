#!/usr/bin/env python
PACKAGE="asr_world_model"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# Name, Type, Reconfiguration level, 
# Description, 
# Default, Min, Max

gen.add("enable_object_sampling", bool_t, 0,
  "Sampling additional object poses for recognition result to consider pose uncertainty",
  True)
gen.add("calculate_deviations", bool_t, 0,
  "If true the deviations for sampling a found_object will be calculated depending on bin_size and maxProjectionAngleDeviation, otherwise they will be loaded from the object_database",
  True)
gen.add("deviation_number_of_samples_position", int_t, 0,
  "The number of additional object poses per axis * 2 (* 2, because it will be samples in +axis and -axis)",
  1, 0, 1000)
gen.add("deviation_number_of_samples_orientation", int_t, 0,
  "The number of additional object poses per axis * 2 (* 2, because it will be samples in +axis and -axis)",
  1, 0, 1000)
gen.add("objects_to_sample", str_t, 0,
    "Specify the object which should be sampled to reduce the combinatorial explosion. Leave blank to sample all objects",
    "")
gen.add("object_position_distance_threshold", double_t, 0,
  "Determines the maximum distance between two positions to be considered as neighbor",
  0.005, 0.0, 1000.0)
gen.add("object_orientation_rad_distance_threshold", double_t, 0,
  "Determines the maximum distance between two orientations to be considered as neighbor",
  0.1, 0.0, 1000.0)
gen.add("viewport_position_distance_threshold", double_t, 0,
  "Determines the maximum distance between two viewport poses to be considered as approx equale",
  0.005, 0.0, 1000.0)
gen.add("viewport_orientation_rad_distance_threshold", double_t, 0,
  "Determines the maximum distance between two viewport poses to be considered as approx equale",
  0.1, 0.0, 1000.0)
gen.add("object_rating_min_count", int_t, 0,
  "The minimum number of neighbors that a cluster needs to considered for the best object list",
  2, 0, 1000)
gen.add("use_default_intermediate_object_weight", bool_t, 0,
  "If true the file from the intermediate_object_generator will not be used nor generated. All weights will be the same",
  False)
gen.add("default_intermediate_object_weight", double_t, 0,
  "The default_intermediate_object_weight will be used if use_default_intermediate_object_weight is true or the intermediate_object_generator does not work right",
  1.0, 0.0, 1000.0)
gen.add("intermediate_object_weight_file_name", str_t, 0,
    "The file name for the itermediate_object weights, generated by the intermediate_object_generator (XXX will be replaced with /rp_ism_node/dbfilename)",
    "PATH/IntermediateObject_XXX.xml")
gen.add("use_world_description", bool_t, 0,
    "If true the object_count, weights and recognizer_name will be parsed from the world_description, otherwise the information will be gained from the sqlTabel",
    False)
gen.add("debugLevels", str_t, 0, "The different level of debug", "")
gen.add("recognizers_string_map", str_t, 0, "", "")
gen.add("weight_string_map", str_t, 0, "", "")
gen.add("object_string_map", str_t, 0, "", "")

exit(gen.generate(PACKAGE, "asr_world_model", "DynamicParameters"))